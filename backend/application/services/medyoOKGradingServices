class GradingService {
    
    // ‚úÖ NEW: Simplified main grading function
    gradeCompetitionSolution(competitionProblemId, solution, problemData = {}) {
        try {
            console.log('üéØ === STARTING NEW GRADING SYSTEM ===');
            console.log('üìù Solution received:', JSON.stringify(solution, null, 2));
            console.log('üìã Problem data:', JSON.stringify(problemData, null, 2));
            
            // Extract parameters
            const difficulty = problemData.difficulty || 'Easy';
            const expected_shape = problemData.expected_shape || null;
            const timeLimit = problemData.timer || 300;
            const timeSpent = problemData.time_spent || 0;
            
            console.log('üîß Extracted:', { difficulty, timeLimit, timeSpent, hasExpectedShape: !!expected_shape });
            
            // Grade the solution
            const gradingResult = this.gradeShape(solution, expected_shape, timeSpent, timeLimit, difficulty);
            
            console.log('üèÜ FINAL GRADING RESULT:', JSON.stringify(gradingResult, null, 2));
            return gradingResult;
            
        } catch (error) {
            console.error('‚ùå Grading error:', error);
            return this.getDefaultGrading();
        }
    }
    
    // ‚úÖ NEW: Main shape grading logic
    gradeShape(solution, expectedShape, timeSpent, timeLimit, difficulty) {
        console.log('üîç === STEP 1: SHAPE TYPE IDENTIFICATION ===');
        
        const userAnswer = solution.answer?.toLowerCase().trim();
        const userShape = solution.shapes?.[0];
        
        if (!userAnswer || !userShape) {
            console.log('‚ùå Missing answer or shape data');
            return this.createGradingResult(false, 0, 'Missing answer or shape data', timeSpent, timeLimit, difficulty);
        }
        
        // Step 1: Determine the basic shape type (circle, triangle, square)
        const basicShapeType = this.identifyBasicShapeType(userShape);
        console.log('üè∑Ô∏è Identified basic shape type:', basicShapeType);
        
        // Step 2: Get expected shape type
        let expectedBasicType = null;
        if (expectedShape) {
            expectedBasicType = this.extractExpectedShapeType(expectedShape);
            console.log('üéØ Expected basic shape type:', expectedBasicType);
        }
        
        // Step 3: Compare shape types
        const shapeTypeAccuracy = this.compareShapeTypes(userAnswer, basicShapeType, expectedBasicType);
        console.log('üìä Shape type accuracy:', shapeTypeAccuracy);
        
        // Step 4: Analyze geometric properties
        const geometryAccuracy = this.analyzeGeometricProperties(userShape, expectedShape, basicShapeType);
        console.log('üìê Geometry accuracy:', geometryAccuracy);
        
        // Step 5: Calculate time bonus
        const timeBonus = this.calculateTimeBonus(timeSpent, timeLimit);
        console.log('‚è∞ Time bonus:', timeBonus);
        
        // Step 6: Calculate final score
        const finalScore = this.calculateFinalScore(shapeTypeAccuracy, geometryAccuracy, timeBonus, difficulty);
        console.log('üéØ Final score breakdown:', finalScore);
        
        return this.createGradingResult(
            finalScore.isCorrect, 
            finalScore.accuracy, 
            finalScore.feedback, 
            timeSpent, 
            timeLimit, 
            difficulty,
            finalScore.xp,
            finalScore.breakdown
        );
    }
    
    // ‚úÖ NEW: Step 1 - Identify basic shape type (circle, triangle, square)
    identifyBasicShapeType(shape) {
        console.log('üîç Analyzing shape:', shape.type);
        
        switch (shape.type) {
            case 'circle':
                return 'circle';
            case 'triangle':
                return 'triangle';
            case 'square':
                // All quadrilaterals are categorized as "square" in our 3-shape system
                return 'square';
            default:
                console.log('‚ùì Unknown shape type, defaulting to square');
                return 'square'; // Default unknown shapes to square category
        }
    }
    
    // ‚úÖ NEW: Extract expected shape type from database
    extractExpectedShapeType(expectedShape) {
        if (expectedShape.shape_data?.type) {
            const type = expectedShape.shape_data.type.toLowerCase();
            return this.normalizeToBasicType(type);
        }
        if (expectedShape.type) {
            const type = expectedShape.type.toLowerCase();
            return this.normalizeToBasicType(type);
        }
        return null;
    }
    
    // ‚úÖ NEW: Normalize any shape type to basic 3-shape system
    normalizeToBasicType(shapeType) {
        if (shapeType === 'circle') return 'circle';
        if (shapeType === 'triangle' || shapeType.includes('triangle')) return 'triangle';
        
        // All quadrilaterals ‚Üí square
        const quadTypes = ['square', 'rectangle', 'rhombus', 'parallelogram', 'trapezoid', 'quadrilateral'];
        if (quadTypes.includes(shapeType)) return 'square';
        
        return shapeType;
    }
    
    // ‚úÖ NEW: Step 3 - Compare shape types
    compareShapeTypes(userAnswer, actualBasicType, expectedBasicType) {
        console.log('üîç === STEP 3: SHAPE TYPE COMPARISON ===');
        console.log('üë§ User said:', userAnswer);
        console.log('ü§ñ Actual basic type:', actualBasicType);
        console.log('üéØ Expected basic type:', expectedBasicType);
        
        const normalizedUserAnswer = this.normalizeToBasicType(userAnswer);
        console.log('üîÑ Normalized user answer:', normalizedUserAnswer);
        
        // Use expected type if available, otherwise compare with actual type
        const targetType = expectedBasicType || actualBasicType;
        console.log('üéØ Target type for comparison:', targetType);
        
        if (normalizedUserAnswer === targetType) {
            console.log('‚úÖ Perfect shape type match!');
            return 1.0;
        }
        
        // Partial credit for related shapes
        if (targetType === 'square') {
            const quadAnswers = ['rectangle', 'rhombus', 'parallelogram', 'quadrilateral'];
            if (quadAnswers.includes(userAnswer)) {
                console.log('‚úÖ Valid quadrilateral sub-type!');
                return 0.85;
            }
        }
        
        // Wrong basic type
        console.log('‚ùå Wrong shape type');
        return 0.0;
    }
    
    // ‚úÖ NEW: Step 4 - Analyze geometric properties
    analyzeGeometricProperties(userShape, expectedShape, basicShapeType) {
        console.log('üîç === STEP 4: GEOMETRIC PROPERTIES ANALYSIS ===');
        console.log('üìê Analyzing', basicShapeType, 'properties');
        
        if (!expectedShape?.shape_data) {
            console.log('‚ö†Ô∏è No expected shape data, skipping geometry analysis');
            return 0.5; // Neutral score when no comparison data
        }
        
        const expectedData = expectedShape.shape_data;
        
        switch (basicShapeType) {
            case 'circle':
                return this.analyzeCircleProperties(userShape, expectedData);
            case 'triangle':
                return this.analyzeTriangleProperties(userShape, expectedData);
            case 'square':
                return this.analyzeQuadrilateralProperties(userShape, expectedData);
            default:
                return 0.5;
        }
    }
    
    // ‚úÖ NEW: Analyze circle properties
    analyzeCircleProperties(userCircle, expectedCircle) {
        console.log('‚≠ï === ANALYZING CIRCLE PROPERTIES ===');
        console.log('üë§ User circle:', { 
            diameter: userCircle.diameter, 
            area: userCircle.area, 
            circumference: userCircle.circumference 
        });
        console.log('üéØ Expected circle:', { 
            diameter: expectedCircle.diameter, 
            area: expectedCircle.area, 
            circumference: expectedCircle.circumference 
        });
        
        let matches = 0;
        let total = 0;
        const tolerance = 0.01
        
        // Check diameter
        if (userCircle.diameter && expectedCircle.diameter) {
            total++;
            const ratio = Math.abs(userCircle.diameter - expectedCircle.diameter) / expectedCircle.diameter;
            if (ratio <= tolerance) {
                matches++;
                console.log('‚úÖ Diameter match:', userCircle.diameter, '‚âà', expectedCircle.diameter);
            } else {
                console.log('‚ùå Diameter mismatch:', userCircle.diameter, 'vs', expectedCircle.diameter, `(${(ratio*100).toFixed(1)}% off)`);
            }
        }
        
        // Check area
        if (userCircle.area && expectedCircle.area) {
            total++;
            const ratio = Math.abs(userCircle.area - expectedCircle.area) / expectedCircle.area;
            if (ratio <= tolerance) {
                matches++;
                console.log('‚úÖ Area match:', userCircle.area, '‚âà', expectedCircle.area);
            } else {
                console.log('‚ùå Area mismatch:', userCircle.area, 'vs', expectedCircle.area, `(${(ratio*100).toFixed(1)}% off)`);
            }
        }
        
        // Check circumference
        if (userCircle.circumference && expectedCircle.circumference) {
            total++;
            const ratio = Math.abs(userCircle.circumference - expectedCircle.circumference) / expectedCircle.circumference;
            if (ratio <= tolerance) {
                matches++;
                console.log('‚úÖ Circumference match:', userCircle.circumference, '‚âà', expectedCircle.circumference);
            } else {
                console.log('‚ùå Circumference mismatch:', userCircle.circumference, 'vs', expectedCircle.circumference, `(${(ratio*100).toFixed(1)}% off)`);
            }
        }
        
        const geometryScore = total > 0 ? matches / total : 0.5;
        console.log('üìä Circle geometry score:', geometryScore, `(${matches}/${total} properties match)`);
        return geometryScore;
    }
    
    // ‚úÖ NEW: Analyze triangle properties
    analyzeTriangleProperties(userTriangle, expectedTriangle) {
        console.log('üìê === ANALYZING TRIANGLE PROPERTIES ===');
        console.log('üë§ User triangle:', { 
            sideLengths: userTriangle.sideLengths, 
            area: userTriangle.area,
            angles: userTriangle.angles 
        });
        console.log('üéØ Expected triangle:', { 
            sideLengths: expectedTriangle.sideLengths, 
            area: expectedTriangle.area,
            angles: expectedTriangle.angles 
        });
        
        let matches = 0;
        let total = 0;
        const tolerance = 0.01
        
        // Check side lengths
        if (userTriangle.sideLengths && expectedTriangle.sideLengths && 
            userTriangle.sideLengths.length === 3 && expectedTriangle.sideLengths.length === 3) {
            total++;
            
            // Sort both arrays to compare similar triangles
            const userSides = [...userTriangle.sideLengths].sort((a, b) => a - b);
            const expectedSides = [...expectedTriangle.sideLengths].sort((a, b) => a - b);
            
            let sideMatches = 0;
            for (let i = 0; i < 3; i++) {
                const ratio = Math.abs(userSides[i] - expectedSides[i]) / expectedSides[i];
                if (ratio <= tolerance) sideMatches++;
            }
            
            if (sideMatches >= 2) { // At least 2 out of 3 sides close
                matches++;
                console.log('‚úÖ Side lengths approximately match');
            } else {
                console.log('‚ùå Side lengths differ significantly');
            }
        }
        
        // Check area
        if (userTriangle.area && expectedTriangle.area) {
            total++;
            const ratio = Math.abs(userTriangle.area - expectedTriangle.area) / expectedTriangle.area;
            if (ratio <= tolerance) {
                matches++;
                console.log('‚úÖ Area match:', userTriangle.area, '‚âà', expectedTriangle.area);
            } else {
                console.log('‚ùå Area mismatch:', userTriangle.area, 'vs', expectedTriangle.area);
            }
        }
        
        const geometryScore = total > 0 ? matches / total : 0.5;
        console.log('üìä Triangle geometry score:', geometryScore, `(${matches}/${total} properties match)`);
        return geometryScore;
    }
    
    // ‚úÖ NEW: Analyze quadrilateral properties
    analyzeQuadrilateralProperties(userQuad, expectedQuad) {
        console.log('üî≤ === ANALYZING QUADRILATERAL PROPERTIES ===');
        console.log('üë§ User quad:', { 
            sideLengths: userQuad.sideLengths, 
            area: userQuad.area,
            angles: userQuad.angles 
        });
        console.log('üéØ Expected quad:', { 
            sideLengths: expectedQuad.sideLengths, 
            area: expectedQuad.area,
            angles: expectedQuad.angles 
        });
        
        let matches = 0;
        let total = 0;
        const tolerance = 0.01
        
        // Check side lengths
        if (userQuad.sideLengths && expectedQuad.sideLengths && 
            userQuad.sideLengths.length === 4 && expectedQuad.sideLengths.length === 4) {
            total++;
            
            // Sort both arrays to compare
            const userSides = [...userQuad.sideLengths].sort((a, b) => a - b);
            const expectedSides = [...expectedQuad.sideLengths].sort((a, b) => a - b);
            
            let sideMatches = 0;
            for (let i = 0; i < 4; i++) {
                const ratio = Math.abs(userSides[i] - expectedSides[i]) / expectedSides[i];
                if (ratio <= tolerance) sideMatches++;
            }
            
            if (sideMatches >= 3) { // At least 3 out of 4 sides close
                matches++;
                console.log('‚úÖ Side lengths approximately match');
            } else {
                console.log('‚ùå Side lengths differ significantly');
            }
        }
        
        // Check area
        if (userQuad.area && expectedQuad.area) {
            total++;
            const ratio = Math.abs(userQuad.area - expectedQuad.area) / expectedQuad.area;
            if (ratio <= tolerance) {
                matches++;
                console.log('‚úÖ Area match:', userQuad.area, '‚âà', expectedQuad.area);
            } else {
                console.log('‚ùå Area mismatch:', userQuad.area, 'vs', expectedQuad.area);
            }
        }
        
        const geometryScore = total > 0 ? matches / total : 0.5;
        console.log('üìä Quadrilateral geometry score:', geometryScore, `(${matches}/${total} properties match)`);
        return geometryScore;
    }
    
    // ‚úÖ NEW: Step 5 - Calculate time bonus
    calculateTimeBonus(timeSpent, timeLimit) {
        console.log('üîç === STEP 5: TIME BONUS CALCULATION ===');
        console.log('‚è∞ Time spent:', timeSpent, 'seconds');
        console.log('‚è±Ô∏è Time limit:', timeLimit, 'seconds');
        
        if (timeSpent <= 0 || timeLimit <= 0) {
            console.log('‚ö†Ô∏è Invalid time data, no time bonus');
            return 0;
        }
        
        const timeRatio = timeSpent / timeLimit;
        console.log('üìä Time ratio:', timeRatio.toFixed(2));
        
        let timeBonus = 0;
        
        if (timeRatio <= 0.5) {
            // Completed in 50% or less of time limit
            timeBonus = 0.3;
            console.log('üöÄ Excellent time! 30% bonus');
        } else if (timeRatio <= 0.7) {
            // Completed in 70% or less of time limit
            timeBonus = 0.2;
            console.log('‚ö° Great time! 20% bonus');
        } else if (timeRatio <= 0.85) {
            // Completed in 85% or less of time limit
            timeBonus = 0.1;
            console.log('üëç Good time! 10% bonus');
        } else if (timeRatio <= 1.0) {
            // Completed within time limit
            timeBonus = 0.05;
            console.log('‚úÖ Within time limit! 5% bonus');
        } else {
            // Overtime
            timeBonus = 0;
            console.log('‚è≥ Overtime, no time bonus');
        }
        
        return timeBonus;
    }
    
    // ‚úÖ NEW: Step 6 - Calculate final score with difficulty multiplier
    calculateFinalScore(shapeTypeAccuracy, geometryAccuracy, timeBonus, difficulty) {
        console.log('üîç === STEP 6: FINAL SCORE CALCULATION ===');
        console.log('üìä Input scores:', {
            shapeTypeAccuracy,
            geometryAccuracy,
            timeBonus,
            difficulty
        });
        
        // Base accuracy: 60% shape type + 40% geometry
        const baseAccuracy = (shapeTypeAccuracy * 0.6) + (geometryAccuracy * 0.4);
        console.log('üìà Base accuracy (60% type + 40% geometry):', baseAccuracy.toFixed(3));
        
        // Apply time bonus
        const withTimeBonus = Math.min(1.0, baseAccuracy + timeBonus);
        console.log('‚è∞ With time bonus:', withTimeBonus.toFixed(3));
        
        // Determine if correct
        const isCorrect = withTimeBonus >= 0.7;
        console.log('‚úÖ Is correct (‚â•0.7)?', isCorrect);
        
        // Calculate XP with difficulty multiplier
        const difficultyMultipliers = {
            'Easy': 1.0,
            'Intermediate': 1.5,
            'Hard': 2.0
        };
        
        const multiplier = difficultyMultipliers[difficulty] || 1.0;
        console.log('üéØ Difficulty multiplier:', multiplier);
        
        // Base XP calculation
        let baseXP = 10; // Effort points
        if (isCorrect) {
            baseXP += 20; // Correctness bonus
            baseXP += Math.floor(withTimeBonus * 30); // Accuracy bonus (0-30 points)
        } else {
            baseXP += Math.floor(withTimeBonus * 15); // Partial credit (0-15 points)
        }
        
        const finalXP = Math.floor(baseXP * multiplier);
        console.log('üíé Final XP calculation:', `${baseXP} √ó ${multiplier} = ${finalXP}`);
        
        // Generate feedback
        let feedback;
        if (isCorrect && withTimeBonus >= 0.95) {
            feedback = `üéâ Perfect! Excellent shape analysis and timing! (+${finalXP} XP)`;
        } else if (isCorrect && withTimeBonus >= 0.8) {
            feedback = `‚ú® Great work! Very accurate shape identification! (+${finalXP} XP)`;
        } else if (isCorrect) {
            feedback = `üëç Good job! Correct shape identification! (+${finalXP} XP)`;
        } else if (withTimeBonus >= 0.5) {
            feedback = `üìù Good effort! Keep practicing shape properties! (+${finalXP} XP)`;
        } else {
            feedback = `üí™ Keep trying! Every attempt helps you learn! (+${finalXP} XP)`;
        }
        
        return {
            isCorrect,
            accuracy: withTimeBonus,
            xp: finalXP,
            feedback,
            breakdown: {
                shapeTypeAccuracy,
                geometryAccuracy,
                timeBonus,
                baseAccuracy,
                difficulty,
                multiplier,
                baseXP
            }
        };
    }
    
    // ‚úÖ NEW: Create standardized grading result
    createGradingResult(isCorrect, accuracy, feedback, timeSpent, timeLimit, difficulty, xp = null, breakdown = null) {
        if (xp === null) {
            // Fallback XP calculation
            const baseXP = 10 + (isCorrect ? 20 : 0) + Math.floor(accuracy * 15);
            const multiplier = difficulty === 'Hard' ? 2.0 : difficulty === 'Intermediate' ? 1.5 : 1.0;
            xp = Math.floor(baseXP * multiplier);
        }
        
        return {
            is_correct: isCorrect,
            accuracy: accuracy,
            xp_gained: xp,
            feedback: feedback,
            breakdown: {
                base_xp: breakdown?.baseXP || 10,
                difficulty_bonus: breakdown ? Math.floor((breakdown.baseXP * breakdown.multiplier) - breakdown.baseXP) : 0,
                time_bonus: breakdown?.timeBonus || 0,
                accuracy_bonus: Math.floor(accuracy * 20),
                effort_points: 10
            },
            grading_details: {
                shape_type_accuracy: breakdown?.shapeTypeAccuracy || 0,
                geometry_accuracy: breakdown?.geometryAccuracy || 0,
                time_bonus: breakdown?.timeBonus || 0,
                difficulty: difficulty,
                time_spent: timeSpent,
                time_limit: timeLimit
            }
        };
    }
    
    getDefaultGrading() {
        return this.createGradingResult(false, 0.1, "Unable to grade solution properly. (+10 XP for effort)", 0, 300, 'Easy', 10);
    }
}

module.exports = GradingService;